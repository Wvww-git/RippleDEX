{"version":3,"file":"index.js","sources":["../src/FunnelChart.tsx"],"sourcesContent":["import * as React from 'react'\nimport styles from './styles.module.css'\n\ninterface IFunnelChartProps {\n  data: any\n  title?: string\n  showValues: boolean\n  showNames: boolean\n  pallette: string[]\n  showRunningTotal: boolean\n  heightRelativeToValue: boolean\n  chartHeight?: number\n  chartWidth?: number\n  style?: any\n  getRowStyle?: (row: any) => any\n  getRowNameStyle?: (row: any) => any\n  getRowValueStyle?: (row: any) => any\n  getToolTip?: (row: any) => string\n  onRowClick?: (row: any) => void\n}\n\ninterface IFunnelChartState {}\n\nconst initialState: IFunnelChartState = {}\n\nclass FunnelChart extends React.Component<\n  IFunnelChartProps,\n  IFunnelChartState\n> {\n  static defaultProps = {\n    showValues: true,\n    showNames: true,\n    pallette: [\n      '#f14c14',\n      '#f39c35',\n      '#68BC00',\n      '#1d7b63',\n      '#4e97a8',\n      '#4466a3'\n    ],\n    showRunningTotal: false,\n    heightRelativeToValue: false\n  }\n\n  constructor(props: IFunnelChartProps) {\n    super(props)\n    this.state = initialState\n  }\n\n  setFunnelRows() {\n    const {\n      data,\n      showNames,\n      showValues,\n      showRunningTotal,\n      heightRelativeToValue,\n      chartHeight,\n      getRowStyle,\n      getRowNameStyle,\n      getRowValueStyle,\n      getToolTip,\n      onRowClick\n    } = this.props\n    const rows = []\n    const totalValue = this.getTotalValue()\n\n    let sizePerValue = 0\n    if (heightRelativeToValue && totalValue > 0) {\n      let totalHeight = chartHeight\n      if (!totalHeight) {\n        totalHeight = 500\n        if (window.innerWidth < 500) {\n          totalHeight = 300\n        }\n      }\n      sizePerValue = totalHeight / totalValue\n    }\n\n    var runningTotal = totalValue\n    if (data) {\n      for (var i1 = 0; i1 < data.length; i1++) {\n        const thisRow = data[i1]\n        let showTitle = true\n        let showValue = true\n\n        if (thisRow.value > 0) {\n          let rowStyle: any = {}\n          let rowTitleStyle: any = {}\n          let rowValueStyle: any = {}\n\n          if (typeof getRowStyle === 'function') {\n            rowStyle = getRowStyle(thisRow)\n          }\n          if (typeof getRowNameStyle === 'function') {\n            rowTitleStyle = getRowNameStyle(thisRow)\n          }\n          if (typeof getRowValueStyle === 'function') {\n            rowValueStyle = getRowValueStyle(thisRow)\n          }\n\n          if (heightRelativeToValue) {\n            const size = sizePerValue * thisRow.value\n            rowStyle.height = size + 'px'\n            rowStyle.maxHeight = size + 'px'\n            if (size < 65) {\n              showValue = false\n            }\n            if (size < 40) {\n              showTitle = false\n            }\n          }\n          if (thisRow.backgroundColor) {\n            rowStyle.backgroundColor = thisRow.backgroundColor\n          }\n          if (!rowStyle.backgroundColor) {\n            rowStyle.backgroundColor = this.props.pallette[\n              i1 % this.props.pallette.length\n            ]\n          }\n\n          if (!showNames) {\n            showTitle = false\n          }\n          if (!showValues) {\n            showValue = false\n          }\n\n          let toolTip = thisRow.name + '\\n' + runningTotal\n          if (typeof getToolTip === 'function') {\n            toolTip = getToolTip(thisRow)\n          }\n\n          if (typeof onRowClick === 'function') {\n            rowStyle.cursor = 'pointer'\n          }\n\n          rows.push(\n            <div\n              key={'funnel-pipeline-chart-row-' + thisRow.name}\n              className={styles['funnel-pipeline-chart-row']}\n              style={rowStyle}\n              title={toolTip}\n              onClick={\n                typeof onRowClick === 'function'\n                  ? () => onRowClick(thisRow)\n                  : undefined\n              }\n            >\n              <div>\n                {showTitle ? (\n                  <div\n                    className={styles['funnel-pipeline-chart-title']}\n                    style={rowTitleStyle}\n                  >\n                    {thisRow.name}\n                  </div>\n                ) : null}\n                {showValue ? (\n                  <div\n                    className={styles['funnel-pipeline-chart-value']}\n                    style={rowValueStyle}\n                  >\n                    {showRunningTotal ? runningTotal : thisRow.value}\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          )\n        }\n\n        runningTotal = runningTotal - thisRow.value\n      }\n    }\n\n    return rows\n  }\n\n  getTotalValue() {\n    const { data } = this.props\n\n    let dataTotal = 0\n    if (data) {\n      for (var i1 = 0; i1 < data.length; i1++) {\n        dataTotal += data[i1].value\n      }\n    }\n\n    return dataTotal\n  }\n\n  render() {\n    const { title, style } = this.props\n\n    const chartStyles: any = {}\n    if (style) {\n      Object.assign(chartStyles, style)\n    }\n    if (this.props.chartWidth) {\n      chartStyles.maxWidth = this.props.chartWidth\n    }\n\n    return (\n      <div className={styles['funnel-pipeline-chart']} style={chartStyles}>\n        {title ? <h2 style={{ marginBottom: '30px' }}>{title}</h2> : null}\n        {this.setFunnelRows()}\n      </div>\n    )\n  }\n}\n\nexport default FunnelChart\n"],"names":["initialState","FunnelChart","props","state","setFunnelRows","data","showNames","showValues","showRunningTotal","heightRelativeToValue","chartHeight","getRowStyle","getRowNameStyle","getRowValueStyle","getToolTip","onRowClick","rows","totalValue","getTotalValue","sizePerValue","totalHeight","window","innerWidth","runningTotal","thisRow","i1","showTitle","showValue","value","rowStyle","rowTitleStyle","rowValueStyle","size","height","maxHeight","backgroundColor","pallette","length","toolTip","name","cursor","push","React","key","className","styles","style","title","onClick","undefined","dataTotal","render","chartStyles","Object","assign","chartWidth","maxWidth","marginBottom"],"mappings":"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"}